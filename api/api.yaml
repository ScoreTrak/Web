swagger: "2.0"
info:
  description: "This is the web api for ScoreTrak."
  version: "1.0.0"
  title: "ScoreTrak Web API"
basePath: "/v1"
tags:
- name: "Home"
- name: "Auth"
- name: "Quickstart"
- name: "Config"
- name: "Teams"
- name: "Users"
- name: "Host Group"
- name: "Host"
- name: "Service Group"
- name: "Service"
- name: "Report"
- name: "Round"
- name: "Import"
- name: "Export"

schemes:
- "https"
- "http"
paths:
  /:
    get:
      tags:
      - "Home"
      summary: "Home page of ScoreTrak"
      description: "Get necessary information to display on the home page"
      operationId: "TO-DO"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        "200":
          description: "OK"
        "401":
          description: "Unauthorized user"

  /auth:
    post:
      tags:
      - "Auth"
      summary: "Authorizes user into the application"
      description: ""
      operationId: "Auth"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
        - in: "formData"
          name: "Username"
          description: "Name of user"
          required: true
          type: "string"
          x-exportParamName: "Username"
        - in: "formData"
          name: "Password"
          description: "Password of user"
          required: true
          type: "string"
          x-exportParamName: "Password"
      responses:
        "200":
          description: "successful operation"
        "403":
          description: "access denied"
  /config:
    post:
      tags:
      - "Config"
      summary: "ScoreTrak configurations for Black Team"
      description: ""
      operationId: ""
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "order placed for purchasing the pet"
        required: true
        schema:
          $ref: "#/definitions/Config"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Config"
        "400":
          description: "Invalid Config"
    get:
      tags:
      - "Config"
      summary: "Get configuration from database if it exists"
      consumes:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
        "403":
          description: "access denied"
          
  /teams:
    get:
      tags:
      - "Teams"
      summary: "Get list of existing teams"
      consumes:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
  
    post:
      tags:
        - "Teams"
      summary: "Add a new team"
      description: "Orders scoring engine to create a team entry in a database"
      operationId: "AddTeam"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Team object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Team"
          x-exportParamName: "Body"
      responses:
        "201":
          description: "Object Created"
          headers:
            WWW_Authenticate:
              type: "string"
        "405":
          description: "Invalid input"
  
  /teams/{id}:
    get:
      tags:
        - "Teams"
      summary: "Get a team"
      description: "Gets a team based on External ID"
      operationId: "GetTeam"
      consumes:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "External ID of team to return"
          required: true
          type: "integer"
          format: "int64"
          x-exportParamName: "id"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Team"
        "400":
          description: "Invalid External ID supplied"
          headers:
            WWW_Authenticate:
              type: "string"
        "404":
          description: "Team not found"
    patch:
      tags:
        - "Teams"
      summary: "Edit a team based on external ID"
      description: "Edit a team based on external ID"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "External ID of team to return"
          required: true
          type: "integer"
          format: "int64"
          x-exportParamName: "id"
        - in: "body"
          name: "body"
          description: "Team object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Team"
          x-exportParamName: "Body"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid External ID supplied"
          headers:
            WWW_Authenticate:
              type: "string"
        "404":
          description: "Team not found"
    
  
  /user:
    post:
      tags:
      - "Users"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
          
  /user/createWithArray:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithArrayInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithList:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithListInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Config:
    type: "object"
    properties:
      roundDuration:
        type: "integer"
        format: "int64"
      enabled:
        type: "boolean"
        default: false
  
  Team:
    type: "object"
    required:
      - "id"
    properties:
      id:
        type: "integer"
        format: "int64"
        description: "this id refers to ID of a team in web."
      enabled:
        type: "boolean"
    description: "Team model represents internal team model of the scoring engine."
    example:
      id: 0
      enabled: true
      
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"