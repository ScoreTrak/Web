swagger: "2.0"
info:
  description: "This is the web api for ScoreTrak."
  version: "1.0.0"
  title: "ScoreTrak Web API"
basePath: "/v1"
tags:
- name: "Home"
- name: "Auth"
- name: "Quickstart"
- name: "Config"
- name: "Teams"
- name: "Users"
- name: "Host Group"
- name: "Host"
- name: "Service Group"
- name: "Service"
- name: "Report"
- name: "Round"
- name: "Import"
- name: "Export"

schemes:
- "https"
- "http"
paths:
  /:
    get:
      tags:
      - "Home"
      summary: "Home page of ScoreTrak"
      description: "Get necessary information to display on the home page"
      operationId: "TO-DO"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        "200":
          description: "OK"
        "401":
          description: "Unauthorized user"

  /auth:
    post:
      tags:
      - "Auth"
      summary: "Authorizes user into the application"
      description: ""
      operationId: "Auth"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
        - in: "formData"
          name: "Username"
          description: "Name of user"
          required: true
          type: "string"
          x-exportParamName: "Username"
        - in: "formData"
          name: "Password"
          description: "Password of user"
          required: true
          type: "string"
          x-exportParamName: "Password"
      responses:
        "200":
          description: "successful operation"
        "403":
          description: "access denied"
  /config:
    post:
      tags:
      - "Config"
      summary: "ScoreTrak configurations for Black Team"
      description: ""
      operationId: ""
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "order placed for purchasing the pet"
        required: true
        schema:
          $ref: "#/definitions/Config"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Config"
        "400":
          description: "Invalid Config"
    get:
      tags:
      - "Config"
      summary: "Get configuration from database if it exists"
      consumes:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
        "403":
          description: "access denied"
          
  api/team:
    get:
      tags:
      - "Teams"
      summary: "Get list of existing teams"
      consumes:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
  
    post:
      tags:
        - "Teams"
      summary: "Add a new team"
      description: "Orders scoring engine to create a team entry in a database"
      operationId: "AddTeam"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Team object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Team"
          x-exportParamName: "Body"
      responses:
        "201":
          description: "Object Created"
          headers:
            WWW_Authenticate:
              type: "string"
        "405":
          description: "Invalid input"
  
  api/team/{id}:
    get:
      tags:
        - "Teams"
      summary: "Get a team"
      description: "Gets a team based on External ID"
      operationId: "GetTeam"
      consumes:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "External ID of team to return"
          required: true
          type: "integer"
          format: "int64"
          x-exportParamName: "id"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Team"
        "400":
          description: "Invalid External ID supplied"
          headers:
            WWW_Authenticate:
              type: "string"
        "404":
          description: "Team not found"
    patch:
      tags:
        - "Teams"
      summary: "Edit a team based on external ID"
      description: "Edit a team based on external ID"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "External ID of team to return"
          required: true
          type: "integer"
          format: "int64"
          x-exportParamName: "id"
        - in: "body"
          name: "body"
          description: "Team object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Team"
          x-exportParamName: "Body"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid External ID supplied"
          headers:
            WWW_Authenticate:
              type: "string"
        "404":
          description: "Team not found"
  
  api/team/{id}/hosts:
    get:
      tags:
      - "Teams"
      summary: "Get all hosts for a given team"
      operationId: "getHostsForTeam"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "External ID of team"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "id"
      responses:
        "200":
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/host"
        "401":
          description: "Authentication token is missing, or incorrect"
          headers:
            WWW_Authenticate:
              type: "string"
  
  api/team/{teamID}/host/{hostID}:
    get:
      tags:
      - "Teams"
      summary: Get a single host given a team
      operationId: "GetHostFromTeam"
      produces:
      - "application/json"
      parameters:
      - name: "teamID"
        in: "path"
        description: "External ID of team"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "teamID"
      - name: "hostID"
        in: "path"
        description: "ID of Host to retrieve"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "hostID"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/host"
        "400":
          description: "Invalid ID supplied"
        "401":
          description: "Authentication token is missing, or incorrect"
          headers:
            WWW_Authenticate:
              type: "string"
        "404":
          description: "Host not found"
    patch:
      tags:
      - "Teams"
      summary: Update host information
      operationId: "UpdateHostByTeam"
      parameters:
      - name: "teamID"
        in: "path"
        description: "External ID of team"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "teamID"
      - name: "hostID"
        in: "path"
        description: "ID of Host to retrieve"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "hostID"
      - name: "hostInfo"
        in: "body"
        description: "Update host information"
        required: true
        schema:
          $ref: "#/definitions/host"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid ID supplied"
        "401":
          description: "Authentication token is missing, or incorrect"
          headers:
            WWW_Authenticate:
              type: "string"
        "404":
          description: "Host not found"
  
  api/team/{teamID}/services:
    get:
      tags:
      - "Teams"
      summary: "Get all services given a team"
      operationId: "getServicesByTeam"
      parameters:
      - name: "teamID"
        in: "path"
        description: "External ID of team"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "teamID"
      responses:
        "200":
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/service"
        "401":
          description: "Authentication token is missing, or incorrect"
          headers:
            WWW_Authenticate:
              type: "string"
    
  api/team/{teamID}/service/{serviceID}:
    get:
      tags:
      - "Teams"
      summary: "Get services for a given team"
      operationId: "getServiceFromTeam"
      produces:
      - "application/json"
      parameters:
      - name: "teamID"
        in: "path"
        description: "External ID of team"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "teamID"
      - name: "serviceID"
        in: "path"
        description: "External ID of service"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "serviceID"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/service"
        "400":
          description: "Invalid ID supplied"
        "401":
          description: "Authentication token is missing, or incorrect"
          headers:
            WWW_Authenticate:
              type: "string"
        "404":
          description: "Service not found"

        
      
    
  
  /user:
    post:
      tags:
      - "Users"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
          
          
  
  /host_group:
    get:
      tags:
        - "Host Group"
      summary: "Retreive all properties"
      description: "Orders scoring engine to return all properties"
      operationId: "GetHostGroups"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters: []
      responses:
        "200":
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Host_Group"
        "401":
          description: "Authentication token is missing, or incorrect"
          headers:
            WWW_Authenticate:
              type: "string"
          
          
          
          
          
          
          
          
          
          
          
          
  /user/createWithArray:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithArrayInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithList:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithListInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"

definitions:
  Config:
    type: "object"
    properties:
      roundDuration:
        type: "integer"
        format: "int64"
      enabled:
        type: "boolean"
        default: false

  Team:
    type: "object"
    required:
      - "id"
    properties:
      id:
        type: "integer"
        format: "int64"
        description: "this id refers to ID of a team in web."
      enabled:
        type: "boolean"
    description: "Team model represents internal team model of the scoring engine."
    example:
      id: 0
      enabled: true
      
  Host_Group:
    type: "object"
    required:
      - "name"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "Web"
      enabled:
        type: "boolean"
        description: "Enables or disables scoring for a given host group. In case\
          \ you want to stop scoring a set of simalar hosts, you can set this property\
          \ to false"
    description: "Host Group model represents a set of hosts that have a common purpose,\
      \ but are in different teams. For instance team 1 web, and team 2 web would\
      \ bellong to a host group Web"
    example:
      name: "Web"
      id: 0
      enabled: true
      
  host:
    type: "object"
    required:
      - "address"
    properties:
      id:
        type: "integer"
        format: "int64"
      address:
        type: "string"
      host_group_id:
        type: "integer"
        format: "int64"
        description: "The ID of a host group that the host belongs to."
      team_name:
        type: "string"
        description: "The Name of a team that this host belongs too. This parameter\
          \ is optional, however is needed to appear on the scoring engine."
      enabled:
        type: "boolean"
        description: "Enables or disables scoring for a single host"
      edit_host:
        type: "boolean"
        example: true
        description: "Enables to Edit the hostname. If a single host needs to be eddited\
          \ for one service, and kept only visible for other service, you can make\
          \ 2 services that point to same address, and have different edit_host properties."
    description: "Host model represents a single machine. This could be an IP address\
      \ or a resolvable hostname"
    example:
      address: "address"
      host_group_id: 6
      id: 0
      team_id: 1
      edit_host: true
      enabled: true
  
  service:
    type: "object"
    required:
      - "host_id"
      - "name"
      - "points"
      - "service_group_id"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "FTP"
      display_name:
        type: "string"
        example: "FTP Windows 10"
      points:
        type: "integer"
        format: "int64"
        example: 20
        description: "Points granted for a successful check"
      round_units:
        type: "integer"
        format: "int64"
        example: 5
        description: "The frequency of a service check. If round_units is 5 and round_delay\
          \ is 0, then service checks will happen on every 5th round. (5,10, etc)"
      round_delay:
        type: "integer"
        format: "int64"
        example: 2
        description: "The frequency of a service check. If round_units is 7 and round_delay\
          \ is 3, then service checks will happen on every 7th round with an offset\
          \ of 3. (10,17, etc)"
      service_group_id:
        type: "integer"
        format: "int64"
        example: 333
        description: "ID of a service group the service belongs to"
      host_id:
        type: "integer"
        format: "int64"
        example: 444
        description: "ID of a host the service belongs to"
      enabled:
        type: "boolean"
        description: "Enables or Disables the service"
        default: true
    description: "Service Model represents a service that is being scored for a given\
      \ host"
    example:
      round_delay: 2
      name: "FTP Windows"
      round_units: 5
      id: 0
      service_group_id: 333
      host_id: 444
      enabled: true
      points: 20
      
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
  
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
